#include <stdlib.h>
#include <iostream>

int* stackMemory1() // Создаём функцию stackMemory1, в которой объявлена переменная а, но возвращает указатель на неё
{
    int a = 1;
    return &a;
}

int* stackMemory2() // Создаём функцию stackMemory2, в которой объявлена переменная b и возвращает указатель на неё
{
    int b = 2;
    return &b;
}

int main()
{
    int* b = stackMemory1(); // Создаём указатель b, который указывает на переменную a из stackMemory1
    int a1 = *b; // Так как указатель b указывает на переменную a, то переменная a1 получает значение переменной a, то есть 1
    int* c = stackMemory2(); // Создаём указатель c, который указывает на переменную b из stackMemory2 
    int a2 = *c; // Так как указатель c указывает на переменную b, то переменная a2 получает значение переменной b, то есть 2
    int a3 = *b; // Так как в функции main сначала была вызвана функция stackMemory1, то указатель b указывал на переменную a, но потом была
    // вызвана функция stackMemory2, и теперь указатель b указывает на переменную b, то есть переменная a3 будет ровняться 2, также как и a2

    std::cout << a1 << std::endl; // Выводится на экран значение a1 (1)
    std::cout << a2 << std::endl; // Выводится на экран значение a2 (2)
    std::cout << a3 << std::endl; // Выводится на экран значение a3 (2)
    std::cout << ((uint8_t*)b - (uint8_t*)c) << std::endl; // Выводит на экран разицу адресов указателей b и с, они будут ровняться нулю, так как оба
    // указывают на один и тот же участок памяти

    return 0;
}